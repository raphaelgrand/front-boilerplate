/* ===========================================================
   #WIDTHS
   =========================================================== */

/**
 * Inspired by inuitcss
 * @see https://github.com/inuitcss/inuitcss/blob/develop/utilities/_utilities.widths.scss
 *
 * Generates a series of utility classes that give a fluid width to
 * whichever element applied on. eg:
 *
 *  <img src="" alt="" class="u-1/2">
 *
 * By default, also generate responsive variants of each of these classes
 * by using your Sass MQ configuration. eg:
 *
 *  <div class="o-layout__item u-1/1 u-1/2@tablet u-1/3@desktop">
 *
 * This is useful for making very granular changes to items render in a layout.
 */

/**
 * Width fractions.
 *
 * Which fractions would you like in your grid system(s) ? By default,
 * provides you fractions of one whole, halves, thirds, quarters and fifths.
 *
 * eg:
 *  .u-1/2
 *  .u-2/5
 *  .u-3/4
 *  .u-2/3
 */
$fractions: 1 2 3 4 5 6 !default;

/**
 * The widths mixins.
 *
 * A mixin to spit out our width classes. Pass in the columns we want the widths
 * to have, and an optional suffix for responsive. eg: in order to create thirds
 * and quarters for a small breakpoint:
 *
 * @include widths(3 4, -sm);
 */
@mixin widths($columns, $breakpoint: null) {

  // Loop through number of columns for each denominator of our fraction.
  @each $denominator in $columns {

    // Begin creating a numerator for our fraction up until we hit the
    // denominator.
    @for $numerator from 1 through $denominator {

      // Build a class in the format '.u-3/4[@<breakpoing>'.
      .u-#{$numerator}\/#{$denominator}#{$breakpoint} {
        width: ($numerator / $denominator) * 100% !important;
      }
    }
  }
}

/**
 * A series of width helper classes that you can use to size things like grid
 * systems. Classes take a fraction-like format (e.g. '.u-2/3'). Use these in
 * your markup:
 *
 * <div class="u-7/12">
 *
 * The following will generate widths helper classes based on the fractions
 * defined in the '$inuit-fractions' list.
 */
@include widths($fractions);

/**
 * Automatically generate  grid system(s) for each of
 * defined breakpoints, and give them a responsive suffix, e.g.:
 *
 * <div class="u-3/12@mobile">
 */
@if (variable_exists(mq-breakpoints)) {
  @each $bp-name, $bp-value in $mq-breakpoints {
    @include mq($until: $bp-name) {
      @include widths($fractions, \@#{$bp-name});
    }
  }
}
